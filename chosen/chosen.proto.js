// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
// 
// Version 0.9.7
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) this.parsed[group_position].children += 1;
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            original_html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText,
            active: true
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.set_default_values();
      this.is_multiple = this.form_field.multiple;
      this.default_text_default = this.is_multiple ? "Select Some Options" : "Select an Option";
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.choices = 0;
      this.results_none_found = this.options.no_results_text || "No results match";
      this.infix_search = this.options.infix_search;
      return this.case_sensitive_search = this.options.case_sensitive_search;
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (!this.active_field) {
        return setTimeout((function() {
          return _this.container_mousedown();
        }), 50);
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_get_html = function(option) {
      return option.html;
    };

    AbstractChosen.prototype.option_get_dom_id = function(option) {
      var divider;
      divider = option.group ? '_g_' : '_o_';
      return this.container_id + divider + option.array_index;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.option_get_dom_id(option);
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) classes.push("result-selected");
        if (option.group_array_index != null) classes.push("group-option");
        if (option.classes !== "") classes.push(option.classes);
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + this.result_get_html(option) + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_filter = function(key) {
      var index, index_b, rc, result, tritem;
      rc = [];
      result = this.trie.find(key);
      index = result.matches.length;
      while (index--) {
        tritem = result.matches[index];
        index_b = tritem.length;
        while (index_b--) {
          rc.push(tritem[index_b]);
        }
      }
      return rc;
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) return this.result_select(evt);
          break;
        case 27:
          if (this.results_showing) this.results_hide();
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);
(function() {
  var InfixTrie,
    __hasProp = Object.prototype.hasOwnProperty;

  InfixTrie = (function() {

    function InfixTrie(is_infix, is_case_sensitive) {
      this.is_infix = !!is_infix;
      this.is_case_sensitive = !!is_case_sensitive;
      this.root = [null, {}, false];
      this.cache = {};
      if (this.is_infix) {
        this.infix_roots = {};
      } else {
        this.infix_roots = null;
      }
    }

    InfixTrie.prototype.clean_string = function(str) {
      if (!this.is_case_sensitive) str = str.toLowerCase();
      return str;
    };

    InfixTrie.prototype.add = function(key, object) {
      var chr, curr_node, i, node, _ref;
      key = this.clean_string(key);
      curr_node = this.root;
      for (i = 0, _ref = key.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i--) {
        chr = key.charAt(i);
        node = curr_node[1];
        if (chr in node) {
          curr_node = node[chr];
        } else {
          curr_node = node[chr] = [null, {}, this.root[2]];
          if (this.is_infix) {
            if (chr in this.infix_roots) {
              this.infix_roots[chr].push(curr_node);
            } else {
              this.infix_roots[chr] = [curr_node];
            }
          }
        }
      }
      if (curr_node[0]) {
        curr_node[0].push(object);
      } else {
        curr_node[0] = [object];
      }
      return true;
    };

    InfixTrie.prototype.map_new_array = function(node_array, chr) {
      var i, prefix_root, ret_array, this_nodes_array, _ref;
      if (node_array.length && node_array[0] === this.root) {
        if (this.is_infix) {
          return this.infix_roots[chr] || [];
        } else {
          prefix_root = this.root[1][chr];
          if (prefix_root) {
            return [prefix_root];
          } else {
            return [];
          }
        }
      }
      ret_array = [];
      for (i = 0, _ref = node_array.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i--) {
        this_nodes_array = node_array[i][1];
        if (this_nodes_array.hasOwnProperty(chr)) {
          ret_array.push(this_nodes_array[chr]);
        }
      }
      return ret_array;
    };

    InfixTrie.prototype.find_node_array = function(key) {
      var chr, i, ret_array, this_cache, _ref;
      ret_array = [this.root];
      key = this.clean_string(key);
      this_cache = this.cache;
      for (i = 0, _ref = key.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i--) {
        chr = key.charAt(i);
        if (this_cache.chr === chr) {
          ret_array = this_cache.hit;
        } else {
          ret_array = this.map_new_array(ret_array, chr);
          this_cache.chr = chr;
          this_cache.hit = ret_array;
          this_cache.next = {};
        }
        this_cache = this_cache.next;
      }
      return ret_array;
    };

    InfixTrie.prototype.mark_and_retrieve = function(array, trie, toggle_set) {
      var chr, stack, t, this_trie, _ref;
      stack = [trie];
      while (stack.length > 0) {
        this_trie = stack.pop();
        if (this_trie[2] === toggle_set) continue;
        this_trie[2] = toggle_set;
        if (this_trie[0]) array.unshift(this_trie[0]);
        _ref = this_trie[1];
        for (chr in _ref) {
          if (!__hasProp.call(_ref, chr)) continue;
          t = _ref[chr];
          stack.push(t);
        }
      }
      return true;
    };

    InfixTrie.prototype.find = function(key) {
      var matches, misses, toggle_to, trie, trie_node_array, _i, _len;
      trie_node_array = this.find_node_array(key);
      toggle_to = !this.root[2];
      matches = [];
      misses = [];
      for (_i = 0, _len = trie_node_array.length; _i < _len; _i++) {
        trie = trie_node_array[_i];
        this.mark_and_retrieve(matches, trie, toggle_to);
      }
      this.mark_and_retrieve(misses, this.root, toggle_to);
      return {
        matches: matches,
        misses: misses
      };
    };

    return InfixTrie;

  })();

  this.InfixTrie = InfixTrie;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/

(function() {
  var Chosen, get_side_border_padding, root,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = this;

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    function Chosen() {
      Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      return this.is_rtl = this.form_field.hasClassName("chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return this.form_field.addClassName("chzn-done");
    };

    Chosen.prototype.set_default_values = function() {
      Chosen.__super__.set_default_values.call(this);
      this.single_temp = new Template('<a href="javascript:void(0)" class="chzn-single"><span>#{default}</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      this.multi_temp = new Template('<ul class="chzn-choices"><li class="search-field"><input type="text" value="#{default}" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      this.choice_temp = new Template('<li class="search-choice" id="#{id}"><span>#{choice}</span><a href="javascript:void(0)" class="search-choice-close" rel="#{position}"></a></li>');
      return this.no_results_temp = new Template('<li class="no-results">' + this.results_none_found + ' "<span>#{terms}</span>"</li>');
    };

    Chosen.prototype.set_up_html = function() {
      var base_template, container_props, dd_top, dd_width, sf_width;
      this.container_id = this.form_field.identify().replace(/(:|\.)/g, '_') + "_chzn";
      this.f_width = this.form_field.getStyle("width") ? parseInt(this.form_field.getStyle("width"), 10) : this.form_field.getWidth();
      container_props = {
        'id': this.container_id,
        'class': "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),
        'style': 'width: ' + this.f_width + 'px'
      };
      this.default_text = this.form_field.readAttribute('data-placeholder') ? this.form_field.readAttribute('data-placeholder') : this.default_text_default;
      base_template = this.is_multiple ? new Element('div', container_props).update(this.multi_temp.evaluate({
        "default": this.default_text
      })) : new Element('div', container_props).update(this.single_temp.evaluate({
        "default": this.default_text
      }));
      this.form_field.hide().insert({
        after: base_template
      });
      this.container = $(this.container_id);
      this.container.addClassName("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      this.dropdown = this.container.down('div.chzn-drop');
      dd_top = this.container.getHeight();
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.setStyle({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = this.container.down('input');
      this.search_results = this.container.down('ul.chzn-results');
      this.search_field_scale();
      this.search_no_results = this.container.down('li.no-results');
      if (this.is_multiple) {
        this.search_choices = this.container.down('ul.chzn-choices');
        this.search_container = this.container.down('li.search-field');
      } else {
        this.search_container = this.container.down('div.chzn-search');
        this.selected_item = this.container.down('.chzn-single');
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.setStyle({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      this.set_tab_index();
      return this.form_field.fire("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.observe("mousedown", function(evt) {
        return _this.container_mousedown(evt);
      });
      this.container.observe("mouseup", function(evt) {
        return _this.container_mouseup(evt);
      });
      this.container.observe("mouseenter", function(evt) {
        return _this.mouse_enter(evt);
      });
      this.container.observe("mouseleave", function(evt) {
        return _this.mouse_leave(evt);
      });
      this.search_results.observe("mouseup", function(evt) {
        return _this.search_results_mouseup(evt);
      });
      this.search_results.observe("mouseover", function(evt) {
        return _this.search_results_mouseover(evt);
      });
      this.search_results.observe("mouseout", function(evt) {
        return _this.search_results_mouseout(evt);
      });
      this.form_field.observe("liszt:updated", function(evt) {
        return _this.results_update_field(evt);
      });
      this.search_field.observe("blur", function(evt) {
        return _this.input_blur(evt);
      });
      this.search_field.observe("keyup", function(evt) {
        return _this.keyup_checker(evt);
      });
      this.search_field.observe("keydown", function(evt) {
        return _this.keydown_checker(evt);
      });
      if (this.is_multiple) {
        this.search_choices.observe("click", function(evt) {
          return _this.choices_click(evt);
        });
        return this.search_field.observe("focus", function(evt) {
          return _this.input_focus(evt);
        });
      } else {
        return this.container.observe("click", function(evt) {
          return evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field.disabled;
      if (this.is_disabled) {
        this.container.addClassName('chzn-disabled');
        this.search_field.disabled = true;
        if (!this.is_multiple) {
          this.selected_item.stopObserving("focus", this.activate_action);
        }
        return this.close_field();
      } else {
        this.container.removeClassName('chzn-disabled');
        this.search_field.disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.observe("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var target_closelink;
      if (!this.is_disabled) {
        target_closelink = evt != null ? evt.target.hasClassName("search-choice-close") : false;
        if (evt && evt.type === "mousedown") evt.stop();
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) this.search_field.clear();
            document.observe("click", this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (evt.target === this.selected_item || evt.target.up("a.chzn-single"))) {
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR") return this.results_reset(evt);
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClassName("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      document.stopObserving("click", this.click_test_action);
      if (!this.is_multiple) {
        this.selected_item.tabIndex = this.search_field.tabIndex;
        this.search_field.tabIndex = -1;
      }
      this.active_field = false;
      this.results_hide();
      this.container.removeClassName("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      if (!this.is_multiple && !this.active_field) {
        this.search_field.tabIndex = this.selected_item.tabIndex;
        this.selected_item.tabIndex = -1;
      }
      this.container.addClassName("chzn-container-active");
      this.active_field = true;
      this.search_field.value = this.search_field.value;
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      if (evt.target.up('#' + this.container_id)) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.init_dom_refs = function() {
      var data, _i, _len, _ref, _results;
      _ref = this.results_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.dom_id) {
          _results.push(data.dom_ref = $(data.dom_id));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.results_build = function() {
      var content, option, _i, _len, _ref;
      this.parsing = true;
      this.trie = new InfixTrie(this.infix_search, this.case_sensitive_search);
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        this.search_choices.select("li.search-choice").invoke("remove");
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.down("span").update(this.default_text);
        if (this.form_field.options.length <= this.disable_search_threshold) {
          this.container.addClassName("chzn-container-single-nosearch");
        } else {
          this.container.removeClassName("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.group) {
          content += this.result_add_group(option);
        } else if (!option.empty) {
          this.trie.add(option.html, option.options_index);
          content += this.result_add_option(option);
          if (option.selected && this.is_multiple) {
            this.choice_build(option);
          } else if (option.selected && !this.is_multiple) {
            this.selected_item.down("span").update(option.html);
            if (this.allow_single_deselect) this.single_deselect_control_build();
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.update(content);
      this.init_dom_refs();
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.option_get_dom_id(group);
        return '<li id="' + group.dom_id + '" class="group-result">' + group.label.escapeHTML() + '</li>';
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      this.result_clear_highlight();
      this.result_highlight = el;
      this.result_highlight.addClassName("highlighted");
      maxHeight = parseInt(this.search_results.getStyle('maxHeight'), 10);
      visible_top = this.search_results.scrollTop;
      visible_bottom = maxHeight + visible_top;
      high_top = this.result_highlight.positionedOffset().top;
      high_bottom = high_top + this.result_highlight.getHeight();
      if (high_bottom >= visible_bottom) {
        return this.search_results.scrollTop = (high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0;
      } else if (high_top < visible_top) {
        return this.search_results.scrollTop = high_top;
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClassName('highlighted');
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClassName('chzn-single-with-drop');
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      }
      dd_top = this.is_multiple ? this.container.getHeight() : this.container.getHeight() - 1;
      this.dropdown.setStyle({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.value = this.search_field.value;
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      if (!this.is_multiple) {
        this.selected_item.removeClassName('chzn-single-with-drop');
      }
      this.result_clear_highlight();
      this.dropdown.setStyle({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        this.form_field.tabIndex = -1;
        if (this.is_multiple) {
          return this.search_field.tabIndex = ti;
        } else {
          this.selected_item.tabIndex = ti;
          return this.search_field.tabIndex = -1;
        }
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.value = this.default_text;
        return this.search_field.addClassName("default");
      } else {
        this.search_field.value = "";
        return this.search_field.removeClassName("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = evt.target.hasClassName("active-result") ? evt.target : evt.target.up(".active-result");
      if (target) {
        this.result_highlight = target;
        return this.result_select(evt);
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = evt.target.hasClassName("active-result") ? evt.target : evt.target.up(".active-result");
      if (target) return this.result_do_highlight(target);
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if (evt.target.hasClassName('active-result') || evt.target.up('.active-result')) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (this.active_field && !(evt.target.hasClassName('search-choice') || evt.target.up('.search-choice')) && !this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice_id, link,
        _this = this;
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      this.search_container.insert({
        before: this.choice_temp.evaluate({
          id: choice_id,
          choice: item.html,
          position: item.array_index
        })
      });
      link = $(choice_id).down('a');
      return link.observe("click", function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy(evt.target);
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      this.choices -= 1;
      this.show_search_field_default();
      if (this.is_multiple && this.choices > 0 && this.search_field.value.length < 1) {
        this.results_hide();
      }
      this.result_deselect(link.readAttribute("rel"));
      return link.up('li').remove();
    };

    Chosen.prototype.results_reset = function(evt) {
      this.form_field.options[0].selected = true;
      this.selected_item.down("span").update(this.default_text);
      this.show_search_field_default();
      evt.target.remove();
      if (typeof Event.simulate === 'function') this.form_field.simulate("change");
      if (this.active_field) return this.results_hide();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, option, position;
      if (this.result_highlight) {
        high = this.result_highlight;
        position = high.id.substr(high.id.lastIndexOf("_") + 1);
        option = this.results_data[position];
        option.selected = true;
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_set_active_state(option, false);
        } else {
          this.search_results.descendants(".result-selected").invoke("removeClassName", "result-selected");
          this.result_single_selected = high;
        }
        option.dom_ref.addClassName("result-selected");
        position = high.id.substr(high.id.lastIndexOf("_") + 1);
        this.form_field.options[option.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(option);
        } else {
          this.selected_item.down("span").update(option.html);
          if (this.allow_single_deselect) this.single_deselect_control_build();
        }
        if (!(evt.metaKey && this.is_multiple)) this.results_hide();
        this.search_field.value = "";
        if (typeof Event.simulate === 'function') {
          this.form_field.simulate("change");
        }
        return this.search_field_scale();
      }
    };

    Chosen.prototype.result_set_active_state = function(option, active) {
      if (option.active !== active) {
        option.active = active;
        option.dom_ref[active ? 'addClassName' : 'removeClassName']("active-result");
      }
      return true;
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      result_data.selected = false;
      this.form_field.options[result_data.options_index].selected = false;
      result = $(this.container_id + "_o_" + pos);
      result.removeClassName("result-selected").addClassName("active-result").show();
      this.result_clear_highlight();
      this.winnow_results();
      if (typeof Event.simulate === 'function') this.form_field.simulate("change");
      return this.search_field_scale();
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && !this.selected_item.down("abbr")) {
        return this.selected_item.down("span").insert({
          after: "<abbr class=\"search-choice-close\"></abbr>"
        });
      }
    };

    Chosen.prototype.winnow_results = function() {
      var found, matches, option, results, searchText, startpos, text, zregex, _i, _len, _ref, _ref2;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.value === this.default_text ? "" : this.search_field.value.strip().escapeHTML();
      if (searchText.length) {
        matches = this.results_filter(searchText);
        zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      }
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            $(option.dom_id).hide();
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            if (searchText.length === 0 || (_ref2 = option.options_index, __indexOf.call(matches, _ref2) >= 0)) {
              found = true;
              results += 1;
            }
            if (found) {
              text = option.original_html;
              if (searchText.length) {
                startpos = text.search(zregex);
                text = text.substr(0, startpos + searchText.length) + '</em>' + text.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              }
              if (text !== option.html) {
                option.html = text;
                option.dom_ref.update(this.result_get_html(option));
              }
              this.result_set_active_state(option, true);
              if (option.group_array_index != null) {
                this.results_data[option.group_array_index].dom_ref.setStyle({
                  display: 'list-item'
                });
              }
            } else {
              if (option.dom_ref === this.result_highlight) {
                this.result_clear_highlight();
              }
              this.result_set_active_state(option, false);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var option, _i, _len, _ref, _results;
      this.search_field.clear();
      _ref = this.results_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.empty) {
          if (option.dom_ref.hasClassName("group-result")) {
            _results.push(option.dom_ref.show());
          } else if (!this.is_multiple || !option.dom_ref.hasClassName("result-selected")) {
            _results.push(this.result_set_active_state(option, true));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high;
      if (!this.result_highlight) {
        if (!this.is_multiple) {
          do_high = this.search_results.down(".result-selected.active-result");
        }
        if (!(do_high != null)) {
          do_high = this.search_results.down(".active-result");
        }
        if (do_high != null) return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      return this.search_results.insert(this.no_results_temp.evaluate({
        terms: terms
      }));
    };

    Chosen.prototype.no_results_clear = function() {
      var nr, _results;
      nr = null;
      _results = [];
      while (nr = this.search_results.down(".no-results")) {
        _results.push(nr.remove());
      }
      return _results;
    };

    Chosen.prototype.keydown_arrow = function() {
      var actives, nexts, sibs;
      actives = this.search_results.select("li.active-result");
      if (actives.length) {
        if (!this.result_highlight) {
          this.result_do_highlight(actives.first());
        } else if (this.results_showing) {
          sibs = this.result_highlight.nextSiblings();
          nexts = sibs.intersect(actives);
          if (nexts.length) this.result_do_highlight(nexts.first());
        }
        if (!this.results_showing) return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var actives, prevs, sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        sibs = this.result_highlight.previousSiblings();
        actives = this.search_results.select("li.active-result");
        prevs = sibs.intersect(actives);
        if (prevs.length) {
          return this.result_do_highlight(prevs.first());
        } else {
          if (this.choices > 0) this.results_hide();
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.down("a"));
        return this.clear_backstroke();
      } else {
        this.pending_backstroke = this.search_container.siblings("li.search-choice").last();
        return this.pending_backstroke.addClassName("search-choice-focus");
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClassName("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) this.clear_backstroke();
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.value.length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) this.result_select(evt);
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var dd_top, div, h, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.getStyle(style) + ";";
        }
        div = new Element('div', {
          'style': style_block
        }).update(this.search_field.value.escapeHTML());
        document.body.appendChild(div);
        w = Element.measure(div, 'width') + 25;
        div.remove();
        if (w > this.f_width - 10) w = this.f_width - 10;
        this.search_field.setStyle({
          'width': w + 'px'
        });
        dd_top = this.container.getHeight();
        return this.dropdown.setStyle({
          "top": dd_top + "px"
        });
      }
    };

    return Chosen;

  })(AbstractChosen);

  root.Chosen = Chosen;

  if (Prototype.Browser.IE) {
    if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
      Prototype.BrowserFeatures['Version'] = new Number(RegExp.$1);
    }
  }

  get_side_border_padding = function(elmt) {
    var layout, side_border_padding;
    layout = new Element.Layout(elmt);
    return side_border_padding = layout.get("border-left") + layout.get("border-right") + layout.get("padding-left") + layout.get("padding-right");
  };

  root.get_side_border_padding = get_side_border_padding;

}).call(this);
